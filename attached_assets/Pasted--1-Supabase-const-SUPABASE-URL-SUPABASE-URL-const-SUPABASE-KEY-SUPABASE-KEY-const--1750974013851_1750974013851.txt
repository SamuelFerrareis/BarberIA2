
// 1. Supabase
const SUPABASE_URL = 'SUPABASE_URL';
const SUPABASE_KEY = 'SUPABASE_KEY';
const supabase = window.supabase.createClient(SUPABASE_URL, SUPABASE_KEY);

// 2. Estado
const state = {
  currentDate: new Date(),
  appointments: [],
  currentBarber: 'todos'
};

// 3. Elementos
const elements = {
  calendar: document.getElementById("calendar"),
  currentMonth: document.getElementById("current-month"),
  btnRenne:   document.getElementById("btn-renne"),
  btnLele:    document.getElementById("btn-lele"),
  btnTodos:   document.getElementById("btn-todos"),
  modal:      document.getElementById("modal"),
  modalContent: document.getElementById("modal-content")
};

// 4. Constantes
const MONTH_NAMES = [
  "Janeiro","Fevereiro","Mar√ßo","Abril","Maio","Junho",
  "Julho","Agosto","Setembro","Outubro","Novembro","Dezembro"
];
const WEEK_DAYS = ["Seg","Ter","Qua","Qui","Sex","S√°b","Dom"];

// 5. Inicia
init();
function init() {
  window.setBarbeiro       = setBarbeiro;
  window.changeMonth       = changeMonth;
  window.openNewModal      = openNewModal;
  window.createAppointment = createAppointment;
  window.salvarAlteracoes  = salvarAlteracoes;
  window.deleteAppointment = deleteAppointment;
  window.closeModal        = closeModal;

  updateBarberButtons();
  loadAppointments();
}

// Carrega do Supabase
async function loadAppointments() {
  let apps = [];
  if (state.currentBarber === 'todos') {
    const [r, l] = await Promise.all([
      fetchAppointments('renne'),
      fetchAppointments('lele')
    ]);
    r.forEach(a => a._barber='renne');
    l.forEach(a => a._barber='lele');
    apps = [...r, ...l];
  } else {
    apps = await fetchAppointments(state.currentBarber);
    apps.forEach(a => a._barber = state.currentBarber);
  }
  state.appointments = apps;
  renderCalendar();
}

async function fetchAppointments(barber) {
  const { data, error } = await supabase
    .from(`agendamentos_${barber}`)
    .select('*')
    .order('horainicio', { ascending: true });
  if (error) throw error;
  return (data||[]).map(a => ({ ...a, id: a.agendamentoid }));
}

// Renderiza calend√°rio
function renderCalendar() {
  const y = state.currentDate.getFullYear();
  const m = state.currentDate.getMonth();
  const rawFD = new Date(y,m,1).getDay();
  const firstDay = rawFD === 0 ? 6 : rawFD - 1;
  const lastDate = new Date(y,m+1,0).getDate();
  const isMobile = window.innerWidth < 600;

  elements.currentMonth.textContent = `${MONTH_NAMES[m]} ${y}`;
  elements.calendar.innerHTML = '';

  // Cabe√ßalhos (inclui DOM)
  WEEK_DAYS.forEach(d => {
    const dh = document.createElement("div");
    dh.className = "day-header";
    dh.textContent = d;
    elements.calendar.appendChild(dh);
  });

  // C√©lulas vazias (desktop)
  if (!isMobile) {
    for (let i = 0; i < firstDay; i++) {
      const ev = document.createElement("div");
      ev.className = "day-cell empty";
      elements.calendar.appendChild(ev);
    }
  }

  // Dias do m√™s
  for (let d = 1; d <= lastDate; d++) {
    elements.calendar.appendChild(createDayCell(d, m, y));
  }
}

function createDayCell(day, month, year) {
  const cell = document.createElement("div");
  cell.className = "day-cell";
  const lbl = document.createElement("span");
  lbl.className = "date-label";
  lbl.textContent = day;
  cell.appendChild(lbl);

  const dateStr = `${year}-${String(month+1).padStart(2,'0')}-${String(day).padStart(2,'0')}`;
  let daily = state.appointments.filter(a => a.data === dateStr);
  if (daily.length) {
    daily.sort((a,b) => {
      if (a.status==='realizado'&&b.status!=='realizado') return 1;
      if (b.status==='realizado'&&a.status!=='realizado') return -1;
      return a.horainicio.localeCompare(b.horainicio);
    });
    const ul = document.createElement("ul");
    ul.className = "lista-reservas";
    daily.forEach(app => {
      ul.appendChild(createAppointmentItem(app));
    });
    cell.appendChild(ul);
  }
  return cell;
}

function createAppointmentItem(app) {
  const li = document.createElement("li");
  const origem = state.currentBarber==='todos' ? app._barber : state.currentBarber;
  li.className = `lista-reservas-item ${origem}` +
                  (app.status==='realizado'  ? ' status-realizado'  : '') +
                  (app.status==='cancelado' ? ' status-cancelado' : '');
  const icon = origem==='lele' ? 'üßî' : '‚úÇÔ∏è';
  li.textContent = `${icon} ${app.horainicio.slice(0,5)} - ${app.clientenome}`;
  li.onclick = e => { e.stopPropagation(); showAppointmentDetails(app); };
  return li;
}

// --- Modal de Edi√ß√£o ---
function showAppointmentDetails(app) {
  const barber = app._barber || state.currentBarber;
  elements.modalContent.innerHTML = `
    <h2>Agendamento</h2>
    <label>Status:</label>
    <select id="status-input">
      <option value="agendado"   ${app.status==='agendado'?   'selected':''}>Agendado</option>
      <option value="realizado"  ${app.status==='realizado'?'selected':''}>Realizado</option>
      <option value="cancelado"  ${app.status==='cancelado'?'selected':''}>Cancelado</option>
      <option value=""           ${!app.status?              'selected':''}>-</option>
    </select>
    <label>Cliente:</label><input id="nome-input" value="${app.clientenome||''}" />
    <label>Telefone:</label><input id="telefone-input" value="${app.clientetelefone||''}" />
    <label>Data:</label><input type="date"    id="data-input"  value="${app.data}" />
    <label>In√≠cio:</label><input type="time"    id="inicio-input" value="${app.horainicio}" />
    <label>Fim:</label><input type="time"    id="fim-input"    value="${app.horafim}" />
    <label>Servi√ßo:</label><input id="servico-input" value="${app.servico||''}" />
    <label>Valor:</label><input type="number" step="0.01" id="valor-input" value="${app.valor||0}" />
    <label>Forma Pagamento:</label><input id="pagamento-input" value="${app.forma_pagamento||''}" />
    <button onclick="salvarAlteracoes(${app.agendamentoid},'${barber}')">Salvar Altera√ß√µes</button>
    <button onclick="deleteAppointment(${app.agendamentoid},'${barber}')">Excluir</button>
    <button onclick="closeModal()">Fechar</button>
  `;
  elements.modal.style.display = 'flex';
}

async function salvarAlteracoes(id, barber) {
  const upd = {
    clientenome:     document.getElementById("nome-input").value,
    clientetelefone: document.getElementById("telefone-input").value,
    data:            document.getElementById("data-input").value,
    horainicio:      document.getElementById("inicio-input").value,
    horafim:         document.getElementById("fim-input").value,
    servico:         document.getElementById("servico-input").value,
    valor:           parseFloat(document.getElementById("valor-input").value),
    forma_pagamento: document.getElementById("pagamento-input").value,
    status:          document.getElementById("status-input").value || null
  };
  const { error } = await supabase
    .from(`agendamentos_${barber}`)
    .update(upd)
    .eq('agendamentoid', id);
  if (error) { alert("Erro ao salvar altera√ß√µes!"); console.error(error); }
  else { alert("Altera√ß√µes salvas!"); closeModal(); loadAppointments(); }
}

async function deleteAppointment(id, barber) {
  if (!confirm("Deseja realmente excluir?")) return;
  const { data, error } = await supabase
    .from(`agendamentos_${barber}`)
    .delete()
    .eq('agendamentoid', id)
    .select();
  if (error) { alert("Erro ao excluir!"); console.error(error); }
  else { alert("Exclu√≠do com sucesso!"); closeModal(); loadAppointments(); }
}

// --- Modal de Novo Agendamento ---
function openNewModal() {
  elements.modalContent.innerHTML = `
    <h2>Novo Agendamento</h2>
    <label>Barbeiro:</label>
    <select id="barber-select">
      <option value="renne">Renne</option>
      <option value="lele">Lele</option>
    </select>
    <label>Cliente:</label><input id="new-nome" />
    <label>Telefone:</label><input id="new-telefone" />
    <label>Data:</label><input type="date"  id="new-data" />
    <label>In√≠cio:</label><input type="time"  id="new-inicio" />
    <label>Fim:</label><input type="time"  id="new-fim" />
    <label>Servi√ßo:</label><input id="new-servico" />
    <label>Valor:</label><input type="number" step="0.01" id="new-valor" />
    <label>Forma Pagamento:</label><input id="new-pagamento" />
    <button onclick="createAppointment()">Criar</button>
    <button onclick="closeModal()">Fechar</button>
  `;
  elements.modal.style.display = 'flex';
}

async function createAppointment() {
  const barber = document.getElementById("barber-select").value;
  const payload = {
    clientenome:       document.getElementById("new-nome").value,
    clientetelefone:   document.getElementById("new-telefone").value,
    data:              document.getElementById("new-data").value,
    horainicio:        document.getElementById("new-inicio").value,
    horafim:           document.getElementById("new-fim").value,
    servico:           document.getElementById("new-servico").value,
    valor:             parseFloat(document.getElementById("new-valor").value),
    forma_pagamento:   document.getElementById("new-pagamento").value,
    status:            'agendado'
  };
  const { error } = await supabase
    .from(`agendamentos_${barber}`)
    .insert(payload);
  if (error) { alert("Erro ao criar agendamento!"); console.error(error); }
  else { alert("Agendamento criado com sucesso!"); closeModal(); loadAppointments(); }
}

// Fecha modal
function closeModal() {
  elements.modal.style.display = 'none';
}

// Filtros / navega√ß√£o
function setBarbeiro(b) {
  state.currentBarber = b;
  updateBarberButtons();
  loadAppointments();
}
function updateBarberButtons() {
  elements.btnRenne.classList.toggle('active', state.currentBarber==='renne');
  elements.btnLele.classList.toggle('active', state.currentBarber==='lele');
  elements.btnTodos.classList.toggle('active', state.currentBarber==='todos');
}
function changeMonth(step) {
  state.currentDate.setMonth(state.currentDate.getMonth()+step);
  loadAppointments();
}
